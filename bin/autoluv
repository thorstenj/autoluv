#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "commander/import"
require "dotenv/load"
require "pony"
require "luvwrapper"

program :version, "0.3.1"
program :description, "Automatically schedule and check into Southwest flights 24 hours beforehand."

command :lookup do |c|
  c.syntax = "autoluv lookup [options]"
  c.description = "Lookup departing flight info for a given Southwest confirmation number."
  c.example "Typical Usage", "autoluv lookup -c ABCDEF -f John -l Doe"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.action do |args, options|
    raise OptionParser::MissingArgument, "Confirmation Number" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "First Name" if options.first_name.nil?
    raise OptionParser::MissingArgument, "Last Name" if options.last_name.nil?

    options.confirmation_number.upcase!

    result = Luvwrapper.view_reservation options.confirmation_number, options.first_name, options.last_name

    if result.success?
      itinerary = result.itinerary
      itinerary.destinations.each do |destination|
        destination.segments.each do |segment|
          puts segment
        end
      end
    else
      puts result.message
    end
  end
end

command :checkin do |c|
  c.syntax = "autoluv checkin [options]"
  c.description = "Immediately check into a Southwest flight."
  c.example "Example Usage", "autoluv checkin -c ABCDEF -f John -l Doe"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.option "-b", "--boarding-pass OPTION", String, ["email", "text"], "Valid options are: email or text."
  c.option "-p", "--phone NUMBER", "Required if --boarding-pass text is specified."
  c.option "-e", "--email ADDRESS", "Required if --boarding-pass email or --notify is specified."
  c.option "-n", "--notify", "If specified, send an email notification with results."
  c.action do |args, options|
    raise OptionParser::MissingArgument, "--confirmation-number required" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "--first-name required" if options.first_name.nil?
    raise OptionParser::MissingArgument, "--last-name required" if options.last_name.nil?
    raise OptionParser::MissingArgument, "--email required when using --boarding-pass email or --notify" if (options.boarding_pass == "email" || options.notify) && options.email.nil?
    raise OptionParser::MissingArgument, "--phone required when using --boarding-pass text" if options.boarding_pass == "text" && options.phone.nil?

    options.confirmation_number.upcase!

    boarding_pass_delivery_method = options.boarding_pass.to_sym if options.boarding_pass
    case boarding_pass_delivery_method
    when :email
      boarding_pass_delivery_value = options.email
    when :text
      boarding_pass_delivery_value = options.phone
    end

    result = Luvwrapper.check_in options.confirmation_number, options.first_name, options.last_name, boarding_pass_delivery_method, boarding_pass_delivery_value
    passengers = result.passengers

    if result.success?
      puts passengers.join("\n")
    else
      puts result.message
    end

    if options.notify
      if result.success?
        subject = "[autoluv] Check-In Succeeded"
        body = passengers.join("\n")
      else
        subject = "[autoluv] Check-In Failed"
        body = %(You will need to manually check in here:

https://www.southwest.com/flight/retrieveCheckinDoc.html?confirmationNumber=#{options.confirmation_number}&firstName=#{options.first_name}&lastName=#{options.last_name})
      end

      pony_options = {
        to: options.email,
        from: ENV["FROM_EMAIL"].nil? ? "autoluv@127.0.0.1" : "#{ENV["FROM_EMAIL"]}",
        subject: subject,
        body: body,
      }

      smtp_options = {
        via: :smtp,
        via_options: {
          address: "#{ENV["SMTP_SERVER"]}",
          port: "#{ENV["PORT"]}",
          user_name: "#{ENV["USER_NAME"]}",
          password: "#{ENV["PASSWORD"]}"
        }
      }

      pony_options.merge! smtp_options if ENV["SMTP_SERVER"] && ENV["PORT"] && ENV["USER_NAME"] && ENV["PASSWORD"]

      Pony.mail(pony_options)
    end
  end
end

command :schedule do |c|
  c.syntax = "autoluv schedule [options]"
  c.description = "Schedule check ins based on confirmation number."
  c.example "Example Usage", "autoluv schedule -c ABCDEF -f John -l Doe -b text -p 555-555-1212"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.option "-b", "--boarding-pass OPTION", String, ["email", "text"], "Valid options are: email or text."
  c.option "-p", "--phone NUMBER", "Required if --boarding-pass text is specified."
  c.option "-e", "--email ADDRESS", "Required (for sending results) for use with --boarding-pass email."
  c.action do |args, options|
    raise OptionParser::MissingArgument, "--confirmation-number required" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "--first-name required" if options.first_name.nil?
    raise OptionParser::MissingArgument, "--last-name required" if options.last_name.nil?
    raise OptionParser::MissingArgument, "--email required" if options.email.nil?
    raise OptionParser::MissingArgument, "--phone required when using --boarding-pass text" if options.boarding_pass == "text" && options.phone.nil?

    options.confirmation_number.upcase!

    result = Luvwrapper.view_reservation options.confirmation_number, options.first_name, options.last_name

    if result.success?
      itinerary = result.itinerary
      itinerary.destinations.each do |destination|
        # just need the first leg of the flight to check in
        checkin_time = destination.segments[0].departing_time

        # offsets are in seconds
        checkin_offset = checkin_time.utc_offset
        server_offset = Time.now.utc_offset

        offset_hours = checkin_offset - server_offset

        # we can check in one day beforehand (1 day converted to seconds)
        checkin_time -= (24 * 60 * 60)

        # compensate for our server time zone
        checkin_time -= offset_hours
        autoluv_path = Dir.pwd.split("/").last == "bin" ? "./autoluv" : "./bin/autoluv"

        ruby_command = "#{autoluv_path} checkin --notify -c #{options.confirmation_number} -f #{options.first_name} -l #{options.last_name} -e #{options.email}"

        ruby_command << " -b #{options.boarding_pass}" if options.boarding_pass
        ruby_command << " -p #{options.phone}" if options.boarding_pass == "text"

        at_command = "echo '#{ruby_command}' | at #{checkin_time.strftime('%I:%M %p %m/%d/%y')}"
        # puts at_command
        `#{at_command}`
      end
    else
      puts result.message
    end
  end
end
